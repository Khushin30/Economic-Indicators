warning(paste("Not enough variables meet the correlation threshold for", target_var, ". Skipping PCA."))
next
}
# Subset the correlation matrix to include only selected variables
filtered_cor_matrix <- cor_matrix[vars_to_include, vars_to_include]
# Perform PCA on the filtered correlation matrix
pca_result <- prcomp(filtered_cor_matrix, scale. = FALSE)
# Store the PCA result in the list
pca_results[[target_var]] <- list(
pca = pca_result,
explained_variance = summary(pca_result)$importance[2, ] # Proportion of variance explained
)
# Visualization
plot_title <- paste("PCA for", target_var, "(Cor threshold:", cor_threshold, ")")
pca_plot <- fviz_pca_var(
pca_result,
title = plot_title,
repel = TRUE,
col.var = "cos2", # Coloring by contribution
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
# Print the plot inline
print(pca_plot)
}
return(pca_results)
}
# Example usage with a correlation threshold of 0.6
pca_results <- perform_pca_with_inline_visualization(all_econ_data, target_vars, cor_threshold = 0.5)
library(factoextra)
perform_pca_with_inline_visualization <- function(data, target_vars, cor_threshold = 0.5) {
# Initialize a list to store PCA results for each target variable
pca_results <- list()
for (target_var in target_vars) {
# Subset data for pairwise complete cases with the target variable
target_data <- data[, c(target_var, setdiff(colnames(data), target_vars))]
# Compute the correlation matrix using pairwise.complete.obs
cor_matrix <- cor(target_data, use = "pairwise.complete.obs")
# Filter variables based on correlation threshold with the target variable
target_correlations <- cor_matrix[, target_var, drop = FALSE]  # Correlations with the target variable
vars_to_include <- rownames(target_correlations)[abs(target_correlations[, 1]) >= cor_threshold]
vars_to_include <- setdiff(vars_to_include, target_var)
if (length(vars_to_include) < 2) {
warning(paste("Not enough variables meet the correlation threshold for", target_var, ". Skipping PCA."))
next
}
# Subset the correlation matrix to include only selected variables
filtered_cor_matrix <- cor_matrix[vars_to_include, vars_to_include]
# Perform PCA on the filtered correlation matrix
pca_result <- prcomp(filtered_cor_matrix, scale. = FALSE)
# Store the PCA result in the list
pca_results[[target_var]] <- list(
pca = pca_result,
explained_variance = summary(pca_result)$importance[2, ] # Proportion of variance explained
)
# Visualization
plot_title <- paste("PCA for", target_var, "(Cor threshold:", cor_threshold, ")")
pca_plot <- fviz_pca_var(
pca_result,
title = plot_title,
repel = TRUE,
col.var = "cos2", # Coloring by contribution
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
# Print the plot inline
print(pca_plot)
}
return(pca_results)
}
# Example usage with a correlation threshold of 0.6
pca_results <- perform_pca_with_inline_visualization(all_econ_data, target_vars, cor_threshold = 0.5)
library(factoextra)
perform_pca_with_inline_visualization <- function(data, target_vars, cor_threshold = 0.5) {
# Initialize a list to store PCA results for each target variable
pca_results <- list()
for (target_var in target_vars) {
# Subset data for pairwise complete cases with the target variable
target_data <- data[, c(target_var, setdiff(colnames(data), target_vars))]
# Compute the correlation matrix using pairwise.complete.obs
cor_matrix <- cor(target_data, use = "pairwise.complete.obs")
# Filter variables based on correlation threshold with the target variable
target_correlations <- cor_matrix[, target_var, drop = FALSE]  # Correlations with the target variable
vars_to_include <- rownames(target_correlations)[abs(target_correlations[, 1]) >= cor_threshold]
vars_to_include <- setdiff(vars_to_include, target_var)
if (length(vars_to_include) < 2) {
warning(paste("Not enough variables meet the correlation threshold for", target_var, ". Skipping PCA."))
next
}
# Subset the correlation matrix to include only selected variables
filtered_cor_matrix <- cor_matrix[vars_to_include, vars_to_include]
# Perform PCA on the filtered correlation matrix
pca_result <- prcomp(filtered_cor_matrix, scale. = FALSE)
# Store the PCA result in the list
pca_results[[target_var]] <- list(
pca = pca_result,
explained_variance = summary(pca_result)$importance[2, ] # Proportion of variance explained
)
# Visualization
plot_title <- paste("PCA for", target_var, "(Cor threshold:", cor_threshold, ")")
pca_plot <- fviz_pca_var(
pca_result,
title = plot_title,
repel = TRUE,
col.var = "cos2", # Coloring by contribution
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
# Print the plot inline
print(pca_plot)
}
return(pca_results)
}
# Example usage with a correlation threshold of 0.6
pca_results <- perform_pca_with_inline_visualization(all_econ_data, target_vars, cor_threshold = 0.55)
library(factoextra)
perform_pca_with_inline_visualization <- function(data, target_vars, cor_threshold = 0.5) {
# Initialize a list to store PCA results for each target variable
pca_results <- list()
for (target_var in target_vars) {
# Subset data for pairwise complete cases with the target variable
target_data <- data[, c(target_var, setdiff(colnames(data), target_vars))]
# Compute the correlation matrix using pairwise.complete.obs
cor_matrix <- cor(target_data, use = "pairwise.complete.obs")
# Filter variables based on correlation threshold with the target variable
target_correlations <- cor_matrix[, target_var, drop = FALSE]  # Correlations with the target variable
vars_to_include <- rownames(target_correlations)[abs(target_correlations[, 1]) >= cor_threshold]
vars_to_include <- setdiff(vars_to_include, target_var)
if (length(vars_to_include) < 2) {
warning(paste("Not enough variables meet the correlation threshold for", target_var, ". Skipping PCA."))
next
}
# Subset the correlation matrix to include only selected variables
filtered_cor_matrix <- cor_matrix[vars_to_include, vars_to_include]
# Perform PCA on the filtered correlation matrix
pca_result <- prcomp(filtered_cor_matrix, scale. = FALSE)
# Store the PCA result in the list
pca_results[[target_var]] <- list(
pca = pca_result,
explained_variance = summary(pca_result)$importance[2, ] # Proportion of variance explained
)
# Visualization
plot_title <- paste("PCA for", target_var, "(Cor threshold:", cor_threshold, ")")
pca_plot <- fviz_pca_var(
pca_result,
title = plot_title,
repel = TRUE,
col.var = "cos2", # Coloring by contribution
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
# Print the plot inline
print(pca_plot)
}
return(pca_results)
}
# Example usage with a correlation threshold of 0.6
pca_results <- perform_pca_with_inline_visualization(all_econ_data, target_vars, cor_threshold = 0.5)
knitr::opts_chunk$set(echo = TRUE)
all_econ_data = read.csv('./Key_Economic_Indicators.csv')
colnames(all_econ_data)
head(all_econ_data)
# Load necessary library
library(dplyr)
# Arrange data by Year and Month for proper differencing
all_econ_data <- all_econ_data %>%
arrange(Year, Month)
# Calculate month-over-month differences for all numeric columns
# Exclude 'Year' and 'Month' from differencing
data_diff <- all_econ_data %>%
mutate(across(-c(Year, Month), ~ . - lag(.), .names = "diff_{col}"))
# View the resulting dataset
head(data_diff)
library(dplyr)
library(ggplot2)
library(reshape2)
# Assume your dataset is called 'data_diff' (with differenced values)
# Specify your target variables
target_vars <- c("Consumer.Confidence.Index.US", "Unemployment.TX",
"Existing.Single.Family.Home.Price.TX",
"Retail.Gasoline.Price.TX",
"Consumer.Price.Index.TX")
plot_correlation <- function(target_var, data, threshold = 0) {
# Filter to remove NA values for the target variable
filtered_data <- data %>%
select(all_of(target_var), everything())
# Calculate the correlation matrix
cor_matrix <- cor(filtered_data, use = "pairwise.complete.obs")
# Convert correlation matrix to long format for filtering
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Var1", "Var2", "Correlation")
# Filter correlations by threshold
cor_df <- cor_df %>%
filter(Var1 == target_var & abs(Correlation) > threshold) %>%
arrange(desc(abs(Correlation)))
# Create the plot
ggplot(cor_df, aes(x = Var2, y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
ggtitle(paste("Significant Correlations for", target_var)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels
xlab("Variables") +
ylab("Correlation")
}
# Generate plots for each target variable
plots <- list()
for (target in target_vars) {
plots[[target]] <- plot_correlation(target, data_diff)
}
# Print all plots
for (plot_name in names(plots)) {
print(plots[[plot_name]])
}
plots <- list()
for (target in target_vars) {
plots[[target]] <- plot_correlation(target, data_diff, .3)
}
# Print all plots
for (plot_name in names(plots)) {
print(plots[[plot_name]])
}
plot_correlation <- function(target_var, data, threshold = 0) {
# Filter to remove NA values for the target variable
filtered_data <- data %>%
select(all_of(target_var), everything())
# Calculate the correlation matrix
cor_matrix <- cor(filtered_data, use = "pairwise.complete.obs")
# Convert correlation matrix to long format for filtering
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Var1", "Var2", "Correlation")
# Filter correlations by threshold
cor_df <- cor_df %>%
filter(Var1 == target_var & abs(Correlation) > threshold & Var2 != target_var) %>%
arrange(desc(Correlation))
# Reorder Var2 for plotting
cor_df$Var2 <- factor(cor_df$Var2, levels = cor_df$Var2)
# Create the plot
ggplot(cor_df, aes(x = Var2, y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
ggtitle(paste("Significant Correlations for", target_var)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels
xlab("Variables") +
ylab("Correlation")
}
# Generate plots for each target variable
plots <- list()
for (target in target_vars) {
plots[[target]] <- plot_correlation(target, all_econ_data, .3)
}
# Print all plots
for (plot_name in names(plots)) {
print(plots[[plot_name]])
}
library(tidyr)
yearly_avg <- all_econ_data %>%
group_by(Year) %>%
summarise(across(all_of(target_vars), mean, na.rm = TRUE)) %>%
pivot_longer(-Year, names_to = "Variable", values_to = "Average")
# Plot yearly averages for each target variable
ggplot(yearly_avg, aes(x = Year, y = Average, color = Variable, group = Variable)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_minimal() +
labs(
title = "Yearly Averages of Target Variables",
x = "Year",
y = "Average Value",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Standardize the target variables
all_econ_data_standardized <- all_econ_data %>%
mutate(across(all_of(target_vars), ~ (.-mean(., na.rm = TRUE)) / sd(., na.rm = TRUE),
.names = "std_{col}"))
# Calculate yearly averages for standardized variables
yearly_avg_std <- all_econ_data_standardized %>%
group_by(Year) %>%
summarise(across(starts_with("std_"), mean, na.rm = TRUE)) %>%
pivot_longer(-Year, names_to = "Variable", values_to = "Average") %>%
mutate(Variable = gsub("std_", "", Variable))  # Clean variable names for plot
# Plot yearly averages for standardized variables
ggplot(yearly_avg_std, aes(x = Year, y = Average, color = Variable, group = Variable)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_minimal() +
labs(
title = "Yearly Averages of Standardized Target Variables",
x = "Year",
y = "Standardized Average (z-scores)",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(factoextra)
perform_pca_with_inline_visualization <- function(data, target_vars, cor_threshold = 0.5) {
# Initialize a list to store PCA results for each target variable
pca_results <- list()
for (target_var in target_vars) {
# Subset data for pairwise complete cases with the target variable
target_data <- data[, c(target_var, setdiff(colnames(data), target_vars))]
# Compute the correlation matrix using pairwise.complete.obs
cor_matrix <- cor(target_data, use = "pairwise.complete.obs")
# Filter variables based on correlation threshold with the target variable
target_correlations <- cor_matrix[, target_var, drop = FALSE]  # Correlations with the target variable
vars_to_include <- rownames(target_correlations)[abs(target_correlations[, 1]) >= cor_threshold]
vars_to_include <- setdiff(vars_to_include, target_var)
if (length(vars_to_include) < 2) {
warning(paste("Not enough variables meet the correlation threshold for", target_var, ". Skipping PCA."))
next
}
# Subset the correlation matrix to include only selected variables
filtered_cor_matrix <- cor_matrix[vars_to_include, vars_to_include]
# Perform PCA on the filtered correlation matrix
pca_result <- prcomp(filtered_cor_matrix, scale. = FALSE)
# Store the PCA result in the list
pca_results[[target_var]] <- list(
pca = pca_result,
explained_variance = summary(pca_result)$importance[2, ] # Proportion of variance explained
)
# Visualization
plot_title <- paste("PCA for", target_var, "(Cor threshold:", cor_threshold, ")")
pca_plot <- fviz_pca_var(
pca_result,
title = plot_title,
repel = TRUE,
col.var = "cos2", # Coloring by contribution
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
# Print the plot inline
print(pca_plot)
}
return(pca_results)
}
# Example usage with a correlation threshold of 0.6
pca_results <- perform_pca_with_inline_visualization(all_econ_data, target_vars, cor_threshold = 0.5)
knitr::opts_chunk$set(echo = TRUE)
all_econ_data = read.csv('./Key_Economic_Indicators.csv')
colnames(all_econ_data)
head(all_econ_data)
# Load necessary library
library(dplyr)
# Arrange data by Year and Month for proper differencing
all_econ_data <- all_econ_data %>%
arrange(Year, Month)
# Calculate month-over-month differences for all numeric columns
# Exclude 'Year' and 'Month' from differencing
data_diff <- all_econ_data %>%
mutate(across(-c(Year, Month), ~ . - lag(.), .names = "diff_{col}"))
# View the resulting dataset
head(data_diff)
library(dplyr)
library(ggplot2)
library(reshape2)
# Assume your dataset is called 'data_diff' (with differenced values)
# Specify your target variables
target_vars <- c( "Unemployment.TX",
"Existing.Single.Family.Home.Price.TX",
"Retail.Gasoline.Price.TX",
"Consumer.Price.Index.TX", "Consumer.Confidence.Index.US")
plot_correlation <- function(target_var, data, threshold = 0) {
# Filter to remove NA values for the target variable
filtered_data <- data %>%
select(all_of(target_var), everything())
# Calculate the correlation matrix
cor_matrix <- cor(filtered_data, use = "pairwise.complete.obs")
# Convert correlation matrix to long format for filtering
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Var1", "Var2", "Correlation")
# Filter correlations by threshold
cor_df <- cor_df %>%
filter(Var1 == target_var & abs(Correlation) > threshold) %>%
arrange(desc(abs(Correlation)))
# Create the plot
ggplot(cor_df, aes(x = Var2, y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
ggtitle(paste("Significant Correlations for", target_var)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels
xlab("Variables") +
ylab("Correlation")
}
# Generate plots for each target variable
plots <- list()
for (target in target_vars) {
plots[[target]] <- plot_correlation(target, data_diff)
}
# Print all plots
for (plot_name in names(plots)) {
print(plots[[plot_name]])
}
plots <- list()
for (target in target_vars) {
plots[[target]] <- plot_correlation(target, data_diff, .3)
}
# Print all plots
for (plot_name in names(plots)) {
print(plots[[plot_name]])
}
plot_correlation <- function(target_var, data, threshold = 0) {
# Filter to remove NA values for the target variable
filtered_data <- data %>%
select(all_of(target_var), everything())
# Calculate the correlation matrix
cor_matrix <- cor(filtered_data, use = "pairwise.complete.obs")
# Convert correlation matrix to long format for filtering
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Var1", "Var2", "Correlation")
# Filter correlations by threshold
cor_df <- cor_df %>%
filter(Var1 == target_var & abs(Correlation) > threshold & Var2 != target_var) %>%
arrange(desc(Correlation))
# Reorder Var2 for plotting
cor_df$Var2 <- factor(cor_df$Var2, levels = cor_df$Var2)
# Create the plot
ggplot(cor_df, aes(x = Var2, y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
ggtitle(paste("Significant Correlations for", target_var)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels
xlab("Variables") +
ylab("Correlation")
}
# Generate plots for each target variable
plots <- list()
for (target in target_vars) {
plots[[target]] <- plot_correlation(target, all_econ_data, .3)
}
# Print all plots
for (plot_name in names(plots)) {
print(plots[[plot_name]])
}
library(tidyr)
yearly_avg <- all_econ_data %>%
group_by(Year) %>%
summarise(across(all_of(target_vars), mean, na.rm = TRUE)) %>%
pivot_longer(-Year, names_to = "Variable", values_to = "Average")
# Plot yearly averages for each target variable
ggplot(yearly_avg, aes(x = Year, y = Average, color = Variable, group = Variable)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_minimal() +
labs(
title = "Yearly Averages of Target Variables",
x = "Year",
y = "Average Value",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Standardize the target variables
all_econ_data_standardized <- all_econ_data %>%
mutate(across(all_of(target_vars), ~ (.-mean(., na.rm = TRUE)) / sd(., na.rm = TRUE),
.names = "std_{col}"))
# Calculate yearly averages for standardized variables
yearly_avg_std <- all_econ_data_standardized %>%
group_by(Year) %>%
summarise(across(starts_with("std_"), mean, na.rm = TRUE)) %>%
pivot_longer(-Year, names_to = "Variable", values_to = "Average") %>%
mutate(Variable = gsub("std_", "", Variable))  # Clean variable names for plot
# Plot yearly averages for standardized variables
ggplot(yearly_avg_std, aes(x = Year, y = Average, color = Variable, group = Variable)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_minimal() +
labs(
title = "Yearly Averages of Standardized Target Variables",
x = "Year",
y = "Standardized Average (z-scores)",
color = "Variable"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(factoextra)
perform_pca_with_inline_visualization <- function(data, target_vars, cor_threshold = 0.5) {
# Initialize a list to store PCA results for each target variable
pca_results <- list()
for (target_var in target_vars) {
# Subset data for pairwise complete cases with the target variable
target_data <- data[, c(target_var, setdiff(colnames(data), target_vars))]
# Compute the correlation matrix using pairwise.complete.obs
cor_matrix <- cor(target_data, use = "pairwise.complete.obs")
# Filter variables based on correlation threshold with the target variable
target_correlations <- cor_matrix[, target_var, drop = FALSE]  # Correlations with the target variable
vars_to_include <- rownames(target_correlations)[abs(target_correlations[, 1]) >= cor_threshold]
vars_to_include <- setdiff(vars_to_include, target_var)
if (length(vars_to_include) < 2) {
warning(paste("Not enough variables meet the correlation threshold for", target_var, ". Skipping PCA."))
next
}
# Subset the correlation matrix to include only selected variables
filtered_cor_matrix <- cor_matrix[vars_to_include, vars_to_include]
# Perform PCA on the filtered correlation matrix
pca_result <- prcomp(filtered_cor_matrix, scale. = FALSE)
# Store the PCA result in the list
pca_results[[target_var]] <- list(
pca = pca_result,
explained_variance = summary(pca_result)$importance[2, ] # Proportion of variance explained
)
# Visualization
plot_title <- paste("PCA for", target_var, "(Cor threshold:", cor_threshold, ")")
pca_plot <- fviz_pca_var(
pca_result,
title = plot_title,
repel = TRUE,
col.var = "cos2", # Coloring by contribution
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
# Print the plot inline
print(pca_plot)
}
return(pca_results)
}
# Example usage with a correlation threshold of 0.6
pca_results <- perform_pca_with_inline_visualization(all_econ_data, target_vars, cor_threshold = 0.5)
